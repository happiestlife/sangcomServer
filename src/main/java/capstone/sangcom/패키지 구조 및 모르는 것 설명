< 패키지 작성 순서 >
repository -> MySqlRepository -> service -> serviceImpl -> controller


< 패키지 설명 >
repository : sql문이 어떤 것이 있는지 알려주는 인터페이스
MySqlRepository : sql문으로 DB에서 데이터 가져오기
service : 비지니스 로직에 어떤 기능이 있는지 알려주는 인터페이스
serviceImpl : 비지니스 로직
controller : 사용자로부터 받은 요청을 비즈니스 - 레포지토리 거쳐서 가공한 것을 반환 (CRUD ??)
DAO(Data Access Object) : DB의 data에 접근하기 위한 객체
DTO(Data Transfer Object) : 로직을 가지지 않는 데이터 객체


* 비지니스 로직(도메인 로직) : 데이터가 어떻게 생성되고 저장되고 수정되는지를 정의한 것

EX)
만약 쇼핑몰 프로그램을 사용한다고 했을 때 물품 목록을 보고 마음에 드는 물품들을 장바구니에 담을 것입니다.

이 때 장바구니에 물품을 추가할 때마다 결제예정 금액이 추가된 물품의 금액에 맞게 변경되는 것을 보신 적이 있으실 겁니다.

이렇게 장바구니에 있는 결제예정 금액이 물품이 추가됨에 따라 수정되는 로직이 바로 비즈니스 로직입니다.


< List 메소드 작성법 >
public List<BoardDTO> findBoard(String type, String title);
    // 선택적인 갯수의 무언가를 반환.
    // type, title에 해당하는 게시글을 BoardDTO 자료형(?= generic)에 담아서 반환한다
    // List를 사용하는 이유는, 반환하려는 게시글이 여러개일 수 있어서이다.
    // List<BoardDTO>


< 자바 기초 >
List 자료형
- 배열과 비슷한 자바의 자료형.
- 배열과 가장 큰 차이점은 List는 크기가 정해져 있지 않고 동적으로 변한다는 점이다.

ArrayList
- List 자료형 중 가장 간단한 형태의 자료형.

Generics
- ArrayList<String> pitches = new ArrayList<>(); 처럼
- 객체를 포함하는 자료형도 어떤 객체를 포함하는지에 대해서 명확하게 표현하는 것


< 어노테이션 >
@PathVariable: url 경로({시작일자}, {종료일자})를 변수화하여 사용할 수 있도록 해준다.
@RequestBody: 변수를 받아오도록 한다.
@RequestParam: 전달인자의 실제 이름 (url 뒤에 붙는 파라미터의 값을 가져올 때)